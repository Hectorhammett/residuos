{
  "name": "validatorjs",
  "description": "Validation library inspired by Laravel's Validator",
  "version": "2.0.5",
  "author": {
    "name": "David",
    "email": "dtang859@gmail.com"
  },
  "contributors": [
    {
      "name": "Gary Green",
      "email": "holegary@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "./src/validator.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/skaterdav85/validatorjs"
  },
  "bugs": {
    "url": "https://github.com/skaterdav85/validatorjs/issues?labels=bug&milestone=1&page=1&state=open"
  },
  "keywords": [
    "validatorjs",
    "validator.js",
    "data validation",
    "validator",
    "validate",
    "validation",
    "data",
    "laravel",
    "laravel-validator-for-js"
  ],
  "devDependencies": {
    "browserify": "^10.2.4",
    "chai": "~3.0.0",
    "grunt": "0.4.5",
    "grunt-browserify": "^3.8.0",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-jshint": "0.10.0",
    "grunt-contrib-uglify": "0.9.1",
    "grunt-contrib-watch": "~0.6.1",
    "jit-grunt": "^0.9.1",
    "karma": "~0.12.17",
    "karma-browserify": "^4.2.1",
    "karma-chai": "~0.1.0",
    "karma-chrome-launcher": "~0.1.4",
    "karma-coverage": "~0.2.4",
    "karma-growl-notifications-reporter": "0.0.2",
    "karma-mocha": "~0.1.10",
    "karma-phantomjs-launcher": "~0.1.4",
    "mocha": "~2.2.5"
  },
  "scripts": {
    "test-node": "node node_modules/mocha/bin/mocha spec",
    "test-browser": "grunt dist && node node_modules/karma/bin/karma start --single-run --browsers PhantomJS",
    "test": "npm run test-node && npm run test-browser"
  },
  "readme": "validatorjs\r\n===========\r\n\r\n[![Build Status](https://travis-ci.org/skaterdav85/validatorjs.png?branch=master)](https://travis-ci.org/skaterdav85/validatorjs)\r\n\r\nThe validatorjs library makes data validation in JavaScript very easy in both the browser and Node.js. This library was inspired by [Laravel framework's Validator](http://laravel.com/docs/validation).\r\n\r\n## Why use validatorjs?\r\n\r\n* Not dependent on any libraries.\r\n* Works in both the browser and Node.\r\n* Readable and declarative validation rules.\r\n* Multi language support.\r\n* AMD/Require.js and CommonJS/Browserify support.\r\n* 3.82 kB minified, 6.54 kB unminified\r\n\r\n## Installation\r\n\r\n### Browser\r\n\r\n```html\r\n<script src=\"dist/validator.min.js\"></script>\r\n```\r\n\r\nYou can also install it using Bower.\r\n\r\n```\r\nbower install validatorjs\r\n```\r\n\r\n### Node.js / Browserify Setup\r\n\r\n```\r\nnpm install validatorjs\r\n```\r\n\r\n```js\r\nvar Validator = require('validatorjs');\r\n```\r\n\r\n### Basic Usage\r\n\r\n```js\r\nvar validation = new Validator(data, rules [, customErrorMessages]);\r\n```\r\n\r\n__data__ {Object} - The data you want to validate\r\n\r\n__rules__ {Object} - Validation rules\r\n\r\n__customErrorMessages__ {Object} - Optional custom error messages to return\r\n\r\n#### Example 1 - Passing validation\r\n\r\n```js\r\nvar data = {\r\n\tname: 'John',\r\n\temail: 'johndoe@gmail.com',\r\n\tage: 28\r\n};\r\n\r\nvar rules = {\r\n\tname: 'required',\r\n\temail: 'required|email',\r\n\tage: 'min:18'\r\n};\r\n\r\nvar validation = new Validator(data, rules);\r\n\r\nvalidation.passes(); // true\r\nvalidation.fails(); // false\r\n```\r\n\r\nTo apply validation rules to the _data_ object, use the same object key names for the _rules_ object.\r\n\r\n#### Example 2 - Failing validation\r\n\r\n```js\r\nvar validation = new Validator({\r\n\tname: 'D',\r\n\temail: 'not an email address.com'\r\n}, {\r\n\tname: 'size:3',\r\n\temail: 'required|email'\r\n});\r\n\r\nvalidation.fails(); // true\r\nvalidation.passes(); // false\r\n\r\n// Error messages\r\nvalidation.errors.first('email'); // 'The email format is invalid.'\r\nvalidation.errors.get('email'); // returns an array of all email error messages\r\n```\r\n\r\n### Available Rules\r\n\r\nValidation rules do not have an implicit 'required'. If a field is _undefined_ or an empty string, it will pass validation. If you want a validation to fail for undefined or '', use the _required_ rule.\r\n\r\n#### accepted\r\n\r\nThe field under validation must be yes, on, or 1. This is useful for validating \"Terms of Service\" acceptance.\r\n\r\n#### alpha\r\n\r\nThe field under validation must be entirely alphabetic characters.\r\n\r\n#### alpha_dash\r\n\r\nThe field under validation may have alpha-numeric characters, as well as dashes and underscores.\r\n\r\n#### alpha_num\r\n\r\nThe field under validation must be entirely alpha-numeric characters.\r\n\r\n#### array\r\n\r\nThe field under validation must be an array.\r\n\r\n#### between:min,max\r\n\r\nThe field under validation must be between min and max values.\r\n\r\n#### confirmed\r\n\r\nThe field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\r\n\r\n#### digits:value\r\n\r\nThe field under validation must be numeric and must have an exact length of value.\r\n\r\n#### different:attribute\r\n\r\nThe given field must be different than the field under validation.\r\n\r\n#### email\r\n\r\nThe field under validation must be formatted as an e-mail address.\r\n\r\n#### in:foo,bar,...\r\n\r\nThe field under validation must be included in the given list of values. The field can be an array or string.\r\n\r\n#### integer\r\n\r\nThe field under validation must have an integer value.\r\n\r\n#### max:value\r\n\r\nValidate that an attribute is no greater than a given size\r\n\r\n_Note: Maximum checks are inclusive._\r\n\r\n#### min:value\r\n\r\nValidate that an attribute is at least a given size.\r\n\r\n_Note: Minimum checks are inclusive._\r\n\r\n#### not_in:foo,bar,...\r\n\r\nThe field under validation must not be included in the given list of values.\r\n\r\n#### numeric\r\n\r\nValidate that an attribute is numeric. The string representation of a number will pass.\r\n\r\n#### required\r\n\r\nChecks if the length of the String representation of the value is >\r\n\r\n#### same:attribute\r\n\r\nThe given field must match the field under validation.\r\n\r\n#### size:value\r\n\r\nValidate that an attribute is a given length, or, if an attribute is numeric, is a given value\r\n\r\n#### url\r\n\r\nValidate that an attribute has a valid URL format\r\n\r\n#### regex:pattern\r\n\r\nThe field under validation must match the given regular expression.\r\n\r\n**Note**: When using the ``regex`` pattern, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.\r\nFor each backward slash that you used in your regex pattern, you must escape each one with another backward slash.\r\n\r\n#### Example 3 - Regex validation\r\n\r\n```js\r\nvar validation = new Validator({\r\n\tname: 'Doe',\r\n\tsalary: '10,000.00',\r\n\tyearOfBirth: '1980'\r\n}, {\r\n\tname: 'required|size:3',\r\n\tsalary: ['required', 'regex:/^(?!0\\\\.00)\\\\d{1,3}(,\\\\d{3})*(\\\\.\\\\d\\\\d)?$/'],\r\n\tyearOfBirth: ['required', 'regex:/^(19|20)[\\\\d]{2,2}$/']\r\n});\r\n\r\nvalidation.fails(); // false\r\nvalidation.passes(); // true\r\n\r\n```\r\n\r\n### Registering Custom Validation Rules\r\n\r\n```js\r\nValidator.register(name, callbackFn, errorMessage);\r\n```\r\n\r\n__name__ {String} - The name of the rule.\r\n\r\n__callbackFn__ {Function} - Returns a boolean to represent a successful or failed validation.\r\n\r\n__errorMessage__ {String} - An optional string where you can specify a custom error message. _:attribute_ inside errorMessage will be replaced with the attribute name.\r\n\r\n```js\r\nValidator.register('telephone', function(value, requirement, attribute) { // requirement parameter defaults to null\r\n\treturn val.match(/^\\d{3}-\\d{3}-\\d{4}$/);\r\n}, 'The :attribute phone number is not in the format XXX-XXX-XXXX.');\r\n```\r\n\r\n### Asynchronous validation\r\n\r\nRegister an asynchronous rule which accepts a `passes` callback:\r\n\r\n```js\r\nValidator.registerAsync('username_available', function(username, attribute, req, passes) {\r\n\t// do your database/api checks here etc\r\n\t// then call the `passes` method where appropriate:\r\n\tpasses(); // if username is available\r\n\tpasses(false, 'Username has already been taken.'); // if username is not available\r\n});\r\n```\r\n\r\nThen call your validator passing a callback to `fails` or `passes` like so:\r\n\r\n```js\r\nvar validator = new Validator({ username: 'test123' }, { username: 'required|min:3|username_available' });\r\nvalidator.passes(function() {\r\n\t// Validation passed\r\n});\r\n\r\n// Or call fails()\r\nvalidator.fails(function() {\r\n\t// Error message:\r\n\tvalidator.errors.first('username');\r\n});\r\n```\r\n\r\nNote: if you attempt to call `passes` or `fails` without a callback and the validator detects there are asynchronous validation rules, an exception will be thrown.\r\n\r\n### Error Messages\r\n\r\nThis contructor will automatically generate error messages for validation rules that failed.\r\n\r\nIf there are errors, the Validator instance will have its __errors__ property object populated with the error messages for all failing attributes. The methods and properties on the __errors__ property object are:\r\n\r\n#### .first(attribute)\r\n\r\nreturns the first error message for an attribute, false otherwise\r\n\r\n#### .get(attribute)\r\n\r\nreturns an array of error messages for an attribute, or an empty array if there are no errors\r\n\r\n#### .all()\r\n\r\nreturns an object containing all error messages for all failing attributes\r\n\r\n#### .has(attribute)\r\n\r\nreturns true if error messages exist for an attribute, false otherwise\r\n\r\n#### .errorCount\r\n\r\nthe number of validation errors\r\n\r\n```js\r\nvar validation = new Validator(input, rules);\r\nvalidation.errors.first('email'); // returns first error message for email attribute\r\nvalidator.errors.get('email'); // returns an array of error messages for the email attribute\r\n```\r\n\r\n### Custom Error Messages\r\n\r\nIf you need a specific error message and you don't want to override the default one, you can pass an override as the third argument to the Validator object, just like with [Laravel](http://laravel.com/docs/validation#custom-error-messages).\r\n\r\n```js\r\nvar input = {\r\n\tname: ''\r\n};\r\n\r\nvar rules = {\r\n\tname : 'required'\r\n};\r\n\r\nvar validation = new Validator(input, rules, { required: 'You forgot to give a :attribute' });\r\nvalidation.errors.first('name'); // returns 'You forgot to give a name'\r\n```\r\n\r\nSome of the validators have string and numeric versions. You can change them too.\r\n\r\n```js\r\nvar input = {\r\n\tusername: 'myusernameistoolong'\r\n};\r\n\r\nvar rules = {\r\n\tusername : 'max:16'\r\n};\r\n\r\nvar validation = new Validator(input, rules, {\r\n\tmax: {\r\n\t\tstring: 'The :attribute is too long. Max length is :max.'\r\n\t}\r\n});\r\n\r\nvalidation.errors.first('username'); // returns 'The username is too long. Max length is 16.'\r\n```\r\n\r\nYou can even provide error messages on a per attribute basis! Just set the message's key to 'validator.attribute'\r\n\r\n```js\r\nvar input = { name: '', email: '' };\r\nvar rules = { name : 'required', email : 'required' };\r\n\r\nvar validation = new Validator(input, rules, {\r\n\t\"required.email\": \"Without an :attribute we can't reach you!\"\r\n});\r\n\r\nvalidation.errors.first('name'); // returns  'The name field is required.'\r\nvalidation.errors.first('email'); // returns 'Without an email we can\\'t reach you!'\r\n```\r\n\r\n### Custom attribute names\r\n\r\nTo display a custom \"friendly\" attribute name in error messages, use `.setAttributeNames()`\r\n\r\n```js\r\nvar validator = new Validator({ name: '' }, { name: 'required' });\r\nvalidator.setAttributeNames({ name: 'custom_name' });\r\nif (validator.fails()) {\r\n\tvalidator.errors.first('name'); // \"The custom_name field is required.\"\r\n}\r\n```\r\n\r\nAlternatively you can supply global custom attribute names in your lang with the `attributes` property.\r\n\r\nYou can also configure a custom attribute formatter:\r\n\r\n```js\r\n// Configure global formatter.\r\nValidator.setAttributeFormatter(function(attribute) {\r\n\treturn attribute.replace(/_/g, ' ');\r\n});\r\n\r\n// Or configure formatter for particular instance.\r\nvar validator = new Validator({ first_name: '' }, { first_name: 'required' });\r\nvalidator.setAttributeFormatter(function(attribute) {\r\n\treturn attribute.replace(/_/g, ' ');\r\n});\r\nif (validator.fails()) {\r\n\tconsole.log(validator.errors.first('first_name')); // The first name field is required.\r\n}\r\n```\r\n\r\nNote: by default all _[] characters will be replaced with spaces.\r\n\r\n### Language Support\r\n\r\nError messages are in English by default. To include another language in the browser, reference the language file in a script tag and call `Validator.useLang('lang_code')`.\r\n\r\n```html\r\n<script src=\"dist/validator.min.js\"></script>\r\n<script src=\"dist/lang/ru.js\"></script>\r\n<script>\r\n\tValidator.useLang('es');\r\n</script>\r\n``` \r\n\r\nIn Node, it will automatically pickup on the language source files. \r\n\r\n```js\r\nvar Validator = require('validatorjs');\r\nValidator.useLang('ru');\r\n```\r\n\r\nIf you don't see support for your language, please add one to `src/lang`!\r\n\r\nYou can also add your own custom language by calling `setMessages`:\r\n\r\n```js\r\nValidator.setMessages('lang_code', {\r\n\trequired: 'The :attribute field is required.',\r\n\t....\r\n\t....\r\n});\r\n```\r\n\r\nGet the raw object of messages for the given language:\r\n\r\n```js\r\nValidator.getMessages('lang_code');\r\n```\r\n\r\nSwitch the default language used by the validator:\r\n\r\n```js\r\nValidator.useLang('lang_code');\r\n```\r\n\r\nGet the default language being used:\r\n\r\n```js\r\nValidator.getDefaultLang(); // returns e.g. 'en'\r\n```\r\n\r\nOverride default messages for language:\r\n\r\n```js\r\nvar messages = Validator.getMessages('en');\r\nmessages.required = 'Whoops, :attribute field is required.';\r\nValidator.setMessages('en', messages);\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "validatorjs@2.0.5",
  "dist": {
    "shasum": "778cd626121dad13aa426035ce55c3053f1dd193"
  },
  "_from": "validatorjs@^2.0.3",
  "_resolved": "https://registry.npmjs.org/validatorjs/-/validatorjs-2.0.5.tgz"
}
